# -*- coding: utf-8 -*-
"""Retail Demand Forecasting.ipynb

Automatically generated by Colab.

# 1. LIBRARY IMPORTS
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from prophet import Prophet
from prophet.diagnostics import cross_validation, performance_metrics
from prophet.plot import plot_cross_validation_metric
import os
import time

# 2. SETUP: CREATE DIRECTORIES
os.makedirs('data', exist_ok=True)
os.makedirs('results/visualizations', exist_ok=True)

# 3. DATA LOADING AND EDA
try:
    df = pd.read_csv('data/train.csv')
    df['date'] = pd.to_datetime(df['date'])
    print("Dataset loaded successfully.")
except FileNotFoundError:
    print("\nERROR")
    exit()

print("\nData Info:")
df.info()

daily_sales = df.groupby('date')['sales'].sum().reset_index()
plt.figure(figsize=(18, 6))
plt.plot(daily_sales['date'], daily_sales['sales'], label='Total Daily Sales')
plt.title('Overall Daily Sales Trend (All Stores & Items)', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Units Sold', fontsize=12)
plt.legend()
plt.grid(True)
plt.show()

# 4. FORECASTING (Store 1, Item 1)
df_single_series = df[(df['store'] == 1) & (df['item'] == 1)]
df_prophet = df_single_series[['date', 'sales']].rename(columns={'date': 'ds', 'sales': 'y'})
print(df_prophet.head())

model = Prophet(yearly_seasonality=True, weekly_seasonality=True)
model.fit(df_prophet)

future = model.make_future_dataframe(periods=365)
forecast = model.predict(future)

print("\nForecast preview:")
print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())

fig1 = model.plot(forecast)
plt.title('Sales Forecast for Store 1, Item 1 (Next 365 Days)', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Units Sold', fontsize=12)
plt.savefig('results/visualizations/final_forecast.png')
plt.show()

fig2 = model.plot_components(forecast)
plt.savefig('results/visualizations/forecast_components.png')
plt.show()

# cross-validation
df_cv = cross_validation(model, initial='1095 days', period='180 days', horizon='365 days')
df_p = performance_metrics(df_cv)
print("\nModel Performance Metrics:")
print(df_p)

fig = plot_cross_validation_metric(df_cv, metric='rmse')
plt.title('RMSE over Forecast Horizon', fontsize=16)
plt.show()

# 5. BULK FORECASTING
start_time = time.time()
all_forecasts = []

stores = df['store'].unique()
items = df['item'].unique()
total_combinations = len(stores) * len(items)
current_combination = 0

for store_id in stores:
    # Loop through each item
    for item_id in items:
        current_combination += 1
        print(f"--- Forecasting for Store {store_id}, Item {item_id} ({current_combination}/{total_combinations}) ---")

        series_df = df[(df['store'] == store_id) & (df['item'] == item_id)]
        df_prophet = series_df[['date', 'sales']].rename(columns={'date': 'ds', 'sales': 'y'})

        model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=False)
        model.fit(df_prophet)

        future = model.make_future_dataframe(periods=365)
        forecast = model.predict(future)
        forecast['store'] = store_id
        forecast['item'] = item_id
        all_forecasts.append(forecast)

print("\nAll forecasts generated.")

# 6. COMBINE AND EXPORT RESULTS
final_forecast_df = pd.concat(all_forecasts)
final_forecast_df.rename(columns={'ds': 'date'}, inplace=True)

final_output = pd.merge(final_forecast_df, df, on=['date', 'store', 'item'], how='left')
final_output = final_output[['date', 'store', 'item', 'sales', 'yhat', 'yhat_lower', 'yhat_upper']]
final_output.rename(columns={
    'date': 'Date',
    'sales': 'Actual_Sales',
    'yhat': 'Forecasted_Sales',
    'yhat_lower': 'Forecast_Lower_Bound',
    'yhat_upper': 'Forecast_Upper_Bound'
}, inplace=True)

output_filename = 'results/full_sales_forecast.csv'
final_output.to_csv(output_filename, index=False)

end_time = time.time()
print(f"\nFile saved to: {output_filename}")
print(f"Execution time: {(end_time - start_time) / 60:.2f} minutes")